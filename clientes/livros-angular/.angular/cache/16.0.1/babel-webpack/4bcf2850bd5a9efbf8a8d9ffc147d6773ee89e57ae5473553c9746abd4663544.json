{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/groun/Desktop/Trabalho 5/clientes/livros-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Livro } from './livro';\nimport * as i0 from \"@angular/core\";\nconst baseURL = \"http://localhost:3030/livros\";\nclass ControleLivrosService {\n  obterLivros() {\n    return _asyncToGenerator(function* () {\n      const response = yield fetch(baseURL, {\n        method: 'GET'\n      });\n      const livrosMongo = yield response.json();\n      return livrosMongo.map(livroMongo => {\n        return new Livro(livroMongo.codigo, livroMongo.codEditora, livroMongo.titulo, livroMongo.resumo, livroMongo.autores.split(', '));\n      });\n    })();\n  }\n  incluir(livro) {\n    return _asyncToGenerator(function* () {\n      const livroMongo = {\n        codigo: livro.codigo,\n        codEditora: livro.codEditora,\n        titulo: livro.titulo,\n        resumo: livro.resumo,\n        autores: livro.autores.join(', ')\n      };\n      const response = yield fetch(baseURL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(livroMongo)\n      });\n      const result = yield response.json();\n      return result.ok;\n    })();\n  }\n  excluir(codigo) {\n    return _asyncToGenerator(function* () {\n      const response = yield fetch(`${baseURL}/${codigo}`, {\n        method: 'DELETE'\n      });\n      const result = yield response.json();\n      return result.ok;\n    })();\n  }\n}\nControleLivrosService.ɵfac = function ControleLivrosService_Factory(t) {\n  return new (t || ControleLivrosService)();\n};\nControleLivrosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ControleLivrosService,\n  factory: ControleLivrosService.ɵfac\n});\nexport { ControleLivrosService };","map":{"version":3,"names":["Livro","baseURL","ControleLivrosService","obterLivros","_asyncToGenerator","response","fetch","method","livrosMongo","json","map","livroMongo","codigo","codEditora","titulo","resumo","autores","split","incluir","livro","join","headers","body","JSON","stringify","result","ok","excluir","factory","ɵfac"],"sources":["C:\\Users\\groun\\Desktop\\Trabalho 5\\clientes\\livros-angular\\src\\app\\controle-livro.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Livro } from './livro';\n\nconst baseURL = \"http://localhost:3030/livros\";\n\ninterface LivroMongo {\n    codigo: string;\n    codEditora: number;\n    titulo: string;\n    resumo: string;\n    autores: string;\n}\n\n@Injectable()\nexport class ControleLivrosService {\n    async obterLivros(): Promise<Livro[]> {\n        const response = await fetch(baseURL, { method: 'GET' });\n        const livrosMongo: LivroMongo[] = await response.json();\n        return livrosMongo.map(livroMongo => {\n            return new Livro(\n                livroMongo.codigo,\n                livroMongo.codEditora,\n                livroMongo.titulo,\n                livroMongo.resumo,\n                livroMongo.autores.split(', ')\n            );\n        });\n    }\n\n    async incluir(livro: Livro): Promise<boolean> {\n        const livroMongo: LivroMongo = {\n            codigo: livro.codigo,\n            codEditora: livro.codEditora,\n            titulo: livro.titulo,\n            resumo: livro.resumo,\n            autores: livro.autores.join(', ')\n        };\n        const response = await fetch(baseURL, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(livroMongo)\n        });\n        const result = await response.json();\n        return result.ok;\n    }\n\n    async excluir(codigo: string): Promise<boolean> {\n        const response = await fetch(`${baseURL}/${codigo}`, { method: 'DELETE' });\n        const result = await response.json();\n        return result.ok;\n    }\n}\n"],"mappings":";AACA,SAASA,KAAK,QAAQ,SAAS;;AAE/B,MAAMC,OAAO,GAAG,8BAA8B;AAU9C,MACaC,qBAAqB;EACxBC,WAAWA,CAAA;IAAA,OAAAC,iBAAA;MACb,MAAMC,QAAQ,SAASC,KAAK,CAACL,OAAO,EAAE;QAAEM,MAAM,EAAE;MAAK,CAAE,CAAC;MACxD,MAAMC,WAAW,SAAuBH,QAAQ,CAACI,IAAI,EAAE;MACvD,OAAOD,WAAW,CAACE,GAAG,CAACC,UAAU,IAAG;QAChC,OAAO,IAAIX,KAAK,CACZW,UAAU,CAACC,MAAM,EACjBD,UAAU,CAACE,UAAU,EACrBF,UAAU,CAACG,MAAM,EACjBH,UAAU,CAACI,MAAM,EACjBJ,UAAU,CAACK,OAAO,CAACC,KAAK,CAAC,IAAI,CAAC,CACjC;MACL,CAAC,CAAC;IAAC;EACP;EAEMC,OAAOA,CAACC,KAAY;IAAA,OAAAf,iBAAA;MACtB,MAAMO,UAAU,GAAe;QAC3BC,MAAM,EAAEO,KAAK,CAACP,MAAM;QACpBC,UAAU,EAAEM,KAAK,CAACN,UAAU;QAC5BC,MAAM,EAAEK,KAAK,CAACL,MAAM;QACpBC,MAAM,EAAEI,KAAK,CAACJ,MAAM;QACpBC,OAAO,EAAEG,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC,IAAI;OACnC;MACD,MAAMf,QAAQ,SAASC,KAAK,CAACL,OAAO,EAAE;QAClCM,MAAM,EAAE,MAAM;QACdc,OAAO,EAAE;UAAE,cAAc,EAAE;QAAkB,CAAE;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACb,UAAU;OAClC,CAAC;MACF,MAAMc,MAAM,SAASpB,QAAQ,CAACI,IAAI,EAAE;MACpC,OAAOgB,MAAM,CAACC,EAAE;IAAC;EACrB;EAEMC,OAAOA,CAACf,MAAc;IAAA,OAAAR,iBAAA;MACxB,MAAMC,QAAQ,SAASC,KAAK,CAAC,GAAGL,OAAO,IAAIW,MAAM,EAAE,EAAE;QAAEL,MAAM,EAAE;MAAQ,CAAE,CAAC;MAC1E,MAAMkB,MAAM,SAASpB,QAAQ,CAACI,IAAI,EAAE;MACpC,OAAOgB,MAAM,CAACC,EAAE;IAAC;EACrB;;AApCSxB,qBAAqB,C;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB,C;SAArBA,qBAAqB;EAAA0B,OAAA,EAArB1B,qBAAqB,CAAA2B;AAAA;SAArB3B,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}