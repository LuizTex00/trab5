{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/groun/Desktop/Trabalho 5/clientes/livros-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Livro } from './livro';\nimport * as i0 from \"@angular/core\";\nconst baseURL = \"http://localhost:3030/livros\";\nclass ControleLivrosService {\n  obterLivros() {\n    return _asyncToGenerator(function* () {\n      const response = yield fetch(baseURL, {\n        method: 'GET'\n      });\n      const livrosMongo = yield response.json();\n      return livrosMongo.map(livroMongo => {\n        const livro = new Livro();\n        livro.codigo = livroMongo.codigo;\n        livro.codEditora = livroMongo.codEditora;\n        livro.resumo = livroMongo.resumo;\n        livro.autores = livroMongo.autores;\n        return livro;\n      });\n    })();\n  }\n  incluir(livro) {\n    return _asyncToGenerator(function* () {\n      const livroMongo = {\n        codigo: livro.codigo,\n        codEditora: livro.codEditora,\n        resumo: livro.resumo,\n        autores: livro.autores\n      };\n      const response = yield fetch(baseURL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(livroMongo)\n      });\n      const result = yield response.json();\n      return result.ok;\n    })();\n  }\n  excluir(codigo) {\n    return _asyncToGenerator(function* () {\n      const response = yield fetch(`${baseURL}/${codigo}`, {\n        method: 'DELETE'\n      });\n      const result = yield response.json();\n      return result.ok;\n    })();\n  }\n}\nControleLivrosService.ɵfac = function ControleLivrosService_Factory(t) {\n  return new (t || ControleLivrosService)();\n};\nControleLivrosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ControleLivrosService,\n  factory: ControleLivrosService.ɵfac\n});\nexport { ControleLivrosService };","map":{"version":3,"names":["Livro","baseURL","ControleLivrosService","obterLivros","_asyncToGenerator","response","fetch","method","livrosMongo","json","map","livroMongo","livro","codigo","codEditora","resumo","autores","incluir","headers","body","JSON","stringify","result","ok","excluir","factory","ɵfac"],"sources":["C:\\Users\\groun\\Desktop\\Trabalho 5\\clientes\\livros-angular\\src\\app\\controle-livro.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Livro } from './livro';\n\nconst baseURL = \"http://localhost:3030/livros\";\n\ninterface LivroMongo {\n    codigo: number;\n    codEditora: number;\n    titulo: string;\n    resumo: string;\n    autores: string;\n}\n\n@Injectable()\n\nexport class ControleLivrosService {\n  async obterLivros(): Promise<Livro[]> {\n    const response = await fetch(baseURL, { method: 'GET' });\n    const livrosMongo: LivroMongo[] = await response.json();\n    return livrosMongo.map(livroMongo => {\n      const livro = new Livro();\n      livro.codigo = livroMongo.codigo;\n      livro.codEditora = livroMongo.codEditora;\n      livro.resumo = livroMongo.resumo;\n      livro.autores = livroMongo.autores;\n      return livro;\n    });\n  }\n\n  async incluir(livro: Livro): Promise<boolean> {\n    const livroMongo: LivroMongo = {\n      codigo: livro.codigo,\n      codEditora: livro.codEditora,\n      resumo: livro.resumo,\n      autores: livro.autores\n    };\n    const response = await fetch(baseURL, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(livroMongo)\n    });\n    const result = await response.json();\n    return result.ok;\n  }\n  \n\n  async excluir(codigo: string): Promise<boolean> {\n    const response = await fetch(`${baseURL}/${codigo}`, { method: 'DELETE' });\n    const result = await response.json();\n    return result.ok;\n  }\n}"],"mappings":";AACA,SAASA,KAAK,QAAQ,SAAS;;AAE/B,MAAMC,OAAO,GAAG,8BAA8B;AAU9C,MAEaC,qBAAqB;EAC1BC,WAAWA,CAAA;IAAA,OAAAC,iBAAA;MACf,MAAMC,QAAQ,SAASC,KAAK,CAACL,OAAO,EAAE;QAAEM,MAAM,EAAE;MAAK,CAAE,CAAC;MACxD,MAAMC,WAAW,SAAuBH,QAAQ,CAACI,IAAI,EAAE;MACvD,OAAOD,WAAW,CAACE,GAAG,CAACC,UAAU,IAAG;QAClC,MAAMC,KAAK,GAAG,IAAIZ,KAAK,EAAE;QACzBY,KAAK,CAACC,MAAM,GAAGF,UAAU,CAACE,MAAM;QAChCD,KAAK,CAACE,UAAU,GAAGH,UAAU,CAACG,UAAU;QACxCF,KAAK,CAACG,MAAM,GAAGJ,UAAU,CAACI,MAAM;QAChCH,KAAK,CAACI,OAAO,GAAGL,UAAU,CAACK,OAAO;QAClC,OAAOJ,KAAK;MACd,CAAC,CAAC;IAAC;EACL;EAEMK,OAAOA,CAACL,KAAY;IAAA,OAAAR,iBAAA;MACxB,MAAMO,UAAU,GAAe;QAC7BE,MAAM,EAAED,KAAK,CAACC,MAAM;QACpBC,UAAU,EAAEF,KAAK,CAACE,UAAU;QAC5BC,MAAM,EAAEH,KAAK,CAACG,MAAM;QACpBC,OAAO,EAAEJ,KAAK,CAACI;OAChB;MACD,MAAMX,QAAQ,SAASC,KAAK,CAACL,OAAO,EAAE;QACpCM,MAAM,EAAE,MAAM;QACdW,OAAO,EAAE;UAAE,cAAc,EAAE;QAAkB,CAAE;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,UAAU;OAChC,CAAC;MACF,MAAMW,MAAM,SAASjB,QAAQ,CAACI,IAAI,EAAE;MACpC,OAAOa,MAAM,CAACC,EAAE;IAAC;EACnB;EAGMC,OAAOA,CAACX,MAAc;IAAA,OAAAT,iBAAA;MAC1B,MAAMC,QAAQ,SAASC,KAAK,CAAC,GAAGL,OAAO,IAAIY,MAAM,EAAE,EAAE;QAAEN,MAAM,EAAE;MAAQ,CAAE,CAAC;MAC1E,MAAMe,MAAM,SAASjB,QAAQ,CAACI,IAAI,EAAE;MACpC,OAAOa,MAAM,CAACC,EAAE;IAAC;EACnB;;AAnCWrB,qBAAqB,C;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB,C;SAArBA,qBAAqB;EAAAuB,OAAA,EAArBvB,qBAAqB,CAAAwB;AAAA;SAArBxB,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}